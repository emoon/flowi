// This file is auto-generated by api_gen. DO NOT EDIT!

#[allow(unused_imports)]
use crate::*;

extern "C" {
    fn fl_layout_area_create_impl(
        ctx: *const core::ffi::c_void,
        name: FlString,
        area: LayoutArea,
    ) -> LayoutAreaId;
    fn fl_layout_area_from_children_impl(
        ctx: *const core::ffi::c_void,
        name: FlString,
        children: *const LayoutArea,
        children_size: u32,
        row: i16,
        cols: i16,
    ) -> LayoutAreaId;
    fn fl_layout_area_set_layout_mode_impl(ctx: *const core::ffi::c_void, mode: LayoutMode);
}

#[repr(C)]
#[derive(Debug)]
pub enum LayoutDirection {
    Horizontal = 0,
    Verticial = 1,
}

#[repr(C)]
#[derive(Debug)]
pub enum SizeType {
    Fixed = 0,
    Stretch = 1,
}

/// LayoutMode make it possible to select how ui elements are being layed out.
#[repr(C)]
#[derive(Debug)]
pub enum LayoutMode {
    /// Automatic (default) will use [LayoutArea] to do automatic positining. See [LayoutArea] for more info on how to use this.
    Automatic = 0,
    /// User will have to use the [Ui::set_position]
    Manual = 1,
}

#[repr(C)]
#[derive(Debug)]
pub struct Sizing {
    value: i32,
    value_type: SizeType,
}

#[repr(C)]
#[derive(Debug)]
pub struct LayoutAreaId {
    pub handle: u64,
}

#[repr(C)]
#[derive(Debug)]
pub struct LayoutArea {
    name: FlString,
    width: Sizing,
    height: Sizing,
    direction: LayoutDirection,
}

impl Context {
    pub fn layout_area_create(&self, name: &str, area: LayoutArea) -> LayoutAreaId {
        unsafe {
            let self_ = std::mem::transmute(self);
            let ret_val = fl_layout_area_create_impl(self_, FlString::new(name), area);
            ret_val
        }
    }

    pub fn layout_area_from_children(
        &self,
        name: &str,
        children: &[LayoutArea],
        row: i16,
        cols: i16,
    ) -> LayoutAreaId {
        unsafe {
            let self_ = std::mem::transmute(self);
            let ret_val = fl_layout_area_from_children_impl(
                self_,
                FlString::new(name),
                children.as_ptr(),
                children.len() as _,
                row,
                cols,
            );
            ret_val
        }
    }

    pub fn layout_area_set_layout_mode(&self, mode: LayoutMode) {
        unsafe {
            let self_ = std::mem::transmute(self);
            fl_layout_area_set_layout_mode_impl(self_, mode);
        }
    }
}
