// This file is auto-generated by api_gen. DO NOT EDIT!

#[allow(unused_imports)]
use crate::*;

extern "C" {
    fn fl_image_create_from_file_impl(ctx: *const core::ffi::c_void, filename: FlString) -> u64;
    fn fl_image_create_from_memory_impl(
        ctx: *const core::ffi::c_void,
        name: FlString,
        data: *const u8,
        data_size: u32,
    ) -> u64;
    fn fl_image_get_info_impl(self_c: Image) -> *const ImageInfo;
    fn fl_image_destroy_impl(self_c: Image);
}

#[repr(C)]
#[derive(Debug)]
pub struct ImageInfo {
    /// width of the image
    width: u32,
    /// height of the Image
    height: u32,
}

#[repr(C)]
#[derive(Debug)]
pub struct Image {
    pub handle: u64,
}

impl Context {
    /// Load image from file. Supported formats are:
    /// JPEG baseline & progressive (12 bpc/arithmetic not supported, same as stock IJG lib)
    /// PNG 1/2/4/8/16-bit-per-channel
    /// TGA
    /// BMP non-1bpp, non-RLE
    /// PSD (composited view only, no extra channels, 8/16 bit-per-channel)
    /// GIF
    /// HDR (radiance rgbE format)
    /// PIC (Softimage PIC)
    /// PNM (PPM and PGM binary only)
    pub fn image_create_from_file(&self, filename: &str) -> Result<Image> {
        unsafe {
            let self_ = std::mem::transmute(self);
            let ret_val = fl_image_create_from_file_impl(self_, FlString::new(filename));
            if ret_val == 0 {
                Err(get_last_error())
            } else {
                Ok(Image { handle: ret_val })
            }
        }
    }

    /// Load image from memory. Supported formats are:
    /// JPEG baseline & progressive (12 bpc/arithmetic not supported, same as stock IJG lib)
    /// PNG 1/2/4/8/16-bit-per-channel
    /// TGA
    /// BMP non-1bpp, non-RLE
    /// PSD (composited view only, no extra channels, 8/16 bit-per-channel)
    /// GIF
    /// HDR (radiance rgbE format)
    /// PIC (Softimage PIC)
    /// PNM (PPM and PGM binary only)
    pub fn image_create_from_memory(&self, name: &str, data: &[u8]) -> Result<Image> {
        unsafe {
            let self_ = std::mem::transmute(self);
            let ret_val = fl_image_create_from_memory_impl(
                self_,
                FlString::new(name),
                data.as_ptr(),
                data.len() as _,
            );
            if ret_val == 0 {
                Err(get_last_error())
            } else {
                Ok(Image { handle: ret_val })
            }
        }
    }
}

impl Image {
    /// Get data amout the image
    pub fn get_info<'a>(&self) -> Result<&'a ImageInfo> {
        unsafe {
            let self_ = std::mem::transmute(self);
            let ret_val = fl_image_get_info_impl(self_);
            if ret_val.is_null() {
                Err(get_last_error())
            } else {
                Ok(&*ret_val)
            }
        }
    }

    /// Destroy the created image
    pub fn destroy(&self) {
        unsafe {
            let self_ = std::mem::transmute(self);
            fl_image_destroy_impl(self_);
        }
    }
}
