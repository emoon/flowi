// This file is auto-generated by api_gen. DO NOT EDIT!

#[allow(unused_imports)]
use crate::*;

extern "C" {}

/// Texture format specificed when using [CreateTexture] command
#[repr(C)]
pub enum TextureFormat {
    /// Single byte texture in linear format
    R8_LINEAR = 0,
    /// 3 byte R,G,B format (sRGB)
    RGB8_sRGB = 1,
    /// 3 byte R,G,B format (LINEAR)
    RGB8_LINEAR = 2,
    /// 4 byte R,G,B,A format (sRGB)
    RGBA8_sRGB = 3,
    /// 4 byte R,G,B,A format (LINEAR)
    RGBA8_LINEAR = 4,
    /// 16-bit single format. This will mostly be used for temporary things such as blurs that requires morethan one pass rendering. i16 or f16 will allow better accuracy, but R8_LINEAR can be used in worst casein case the rendering backend doesn't support this format
    I16_OR_F16_LINEAR = 5,
}

/// Used when specifying rect updates
#[repr(C)]
pub struct RenderRect {
    x0: i32,
    y0: i32,
    x1: i32,
    y1: i32,
}

/// Vertex layout for textured triangles
#[repr(C)]
pub struct VertPosUvColor {
    x: f32,
    y: f32,
    u: u16,
    v: u16,
    color: u32,
}

/// Vertex layout for solid triangles
#[repr(C)]
pub struct VertPosColor {
    x: f32,
    y: f32,
    color: u32,
}

/// Used for rendering triangles with a texture.
#[repr(C)]
pub struct TexturedTriangles {
    /// Vertices for the command
    vertex_buffer: VertPosUvColor,
    /// Index buffer for the command
    index_buffer: IdxSize,
    /// Texture id used for the command
    texture_id: u32,
}

#[repr(C)]
pub struct SolidTriangles {
    /// Vertices for the command
    vertex_buffer: VertPosColor,
    /// Index buffer for the command
    index_buffer: IdxSize,
}

#[repr(C)]
pub struct CreateTexture {
    /// Data upload (can be NULL if data is uploaded later)
    data: u8,
    /// This is the id that will later be used when refering to the texture
    id: u16,
    /// See [TextureFormat] for the type
    format: u16,
    /// width of the texture
    width: u16,
    /// height of the texture
    height: u16,
}

/// This is used to update an existing texture with some data. This usually happens when a new image/glyph/etcneeds to be displayed but isn't present in a texture yet
#[repr(C)]
pub struct UpdateTexture {
    /// Data to upload
    data: u8,
    /// area to update
    rect: RenderRect,
    /// Texture to update
    texture_id: u16,
}

/// Used when restricting an area for rendering. How this is to be implemented depends onthe GPUAPI, but for OpenGL this corresponts to https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glScissor.xml
#[repr(C)]
pub struct ScissorRect {
    /// Area restricted for rendering
    rect: RenderRect,
}

impl RenderRect {}

impl VertPosUvColor {}

impl VertPosColor {}

impl TexturedTriangles {}

impl SolidTriangles {}

impl CreateTexture {}

impl UpdateTexture {}

impl ScissorRect {}
