
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by api_gen. DO NOT EDIT!
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <stdbool.h>
#include <stdint.h>
#include "idx.h"
#include "manual.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef enum FlLengthPercent {
    FlLengthPercent_Length = 0,
    FlLengthPercent_Percent = 1,
} FlLengthPercent;

typedef struct FlLengthPercentValue {
    float value;
    FlLengthPercent typ;
} FlLengthPercentValue;

typedef struct FlSpacing {
    uint16_t top;
    uint16_t right;
    uint16_t bottom;
    uint16_t left;
} FlSpacing;

typedef struct FlPadding {
    uint16_t top;
    uint16_t right;
    uint16_t bottom;
    uint16_t left;
} FlPadding;

typedef struct FlBorder {
    FlLengthPercentValue border_radius_top;
    FlLengthPercentValue border_radius_right;
    FlLengthPercentValue border_radius_bottom;
    FlLengthPercentValue border_radius_left;
} FlBorder;

typedef struct FlStyle {
    FlString name;
    FlBorder border;
    FlPadding padding;
    uint32_t current_font;
    FlColor background_color;
    FlColor text_color;
    FlColor font_color;
} FlStyle;

// Create a new style
FlStyle* fl_style_create(FlString name);
// Get the default style. Changing this will apply the base style for the whole application
FlStyle* fl_style_get_default();
// Get the current style which is based on what has been pushed on the style stack using push/pop
FlStyle fl_style_get_current();
// Mark the end of style changes
void fl_style_end_changes(FlStyle* self);
// Select the style to be used, to end using the style use 'fl_pop_style()'
void fl_style_push(FlStyle* self);
// Pops the current style
void fl_style_pop(FlStyle* self);

#ifdef __cplusplus
}
#endif
