
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by api_gen. DO NOT EDIT!
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#include "idx.h"
#include "manual.h"

struct FlContext;

#ifdef __cplusplus
extern "C" {
#endif

typedef enum FlLengthPercent {
    FlLengthPercent_Length = 0,
    FlLengthPercent_Percent = 1,
} FlLengthPercent;

typedef struct FlLengthPercentValue {
    float value;
    FlLengthPercent typ;
} FlLengthPercentValue;

typedef struct FlSpacing {
    uint16_t top;
    uint16_t right;
    uint16_t bottom;
    uint16_t left;
} FlSpacing;

typedef struct FlPadding {
    uint16_t top;
    uint16_t right;
    uint16_t bottom;
    uint16_t left;
} FlPadding;

typedef struct FlBorder {
    FlLengthPercentValue border_radius_top;
    FlLengthPercentValue border_radius_right;
    FlLengthPercentValue border_radius_bottom;
    FlLengthPercentValue border_radius_left;
} FlBorder;

typedef struct FlStyle {
    FlString name;
    FlBorder border;
    FlPadding padding;
    uint32_t current_font;
    FlColor background_color;
    FlColor text_color;
    FlColor font_color;
} FlStyle;

// Create a new style
FlStyle* fl_style_create_impl(struct FlContext* flowi_ctx, FlString name);

FL_INLINE FlStyle* fl_style_create_ctx(struct FlContext* flowi_ctx, const char* name) {
    FlString name_ = {name, 1, (uint32_t)strlen(name)};
    return fl_style_create_impl(flowi_ctx, name_);
}

#define fl_style_create(name_) fl_style_create_ctx(flowi_ctx, name_)

// Get the default style. Changing this will apply the base style for the whole application
FlStyle* fl_style_get_default_impl(struct FlContext* flowi_ctx);

FL_INLINE FlStyle* fl_style_get_default_ctx(struct FlContext* flowi_ctx) {
    return fl_style_get_default_impl(flowi_ctx);
}

#define fl_style_get_default() fl_style_get_default_ctx(flowi_ctx)

// Get the current style which is based on what has been pushed on the style stack using push/pop
FlStyle* fl_style_get_current_impl(struct FlContext* flowi_ctx);

FL_INLINE FlStyle* fl_style_get_current_ctx(struct FlContext* flowi_ctx) {
    return fl_style_get_current_impl(flowi_ctx);
}

#define fl_style_get_current() fl_style_get_current_ctx(flowi_ctx)

// Mark the end of style changes
void fl_style_end_changes_impl(struct FlContext* flowi_ctx, FlStyle* self);

FL_INLINE void fl_style_end_changes_ctx(struct FlContext* flowi_ctx, FlStyle* self) {
    fl_style_end_changes_impl(flowi_ctx, self);
}

#define fl_style_end_changes(self) fl_style_end_changes_ctx(flowi_ctx, self)

// Select the style to be used, to end using the style use 'fl_pop_style()'
void fl_style_push_impl(struct FlContext* flowi_ctx, FlStyle* self);

FL_INLINE void fl_style_push_ctx(struct FlContext* flowi_ctx, FlStyle* self) {
    fl_style_push_impl(flowi_ctx, self);
}

#define fl_style_push(self) fl_style_push_ctx(flowi_ctx, self)

// Pops the current style
void fl_style_pop_impl(struct FlContext* flowi_ctx, FlStyle* self);

FL_INLINE void fl_style_pop_ctx(struct FlContext* flowi_ctx, FlStyle* self) {
    fl_style_pop_impl(flowi_ctx, self);
}

#define fl_style_pop(self) fl_style_pop_ctx(flowi_ctx, self)

#ifdef __cplusplus
}
#endif
