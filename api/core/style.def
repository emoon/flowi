mod font

enum LengthPercent {
    Length = 0,
    Percent = 1,
}

struct LengthPercentValue {
    value: f32,
    typ: LengthPercent,
}

struct Border {
    radius: [LengthPercentValue; 4],
    colors: [u32; 4],
    active: bool,
}

enum Corner {
    TopLeft = 0,
    TopRight = 1,
    BottomLeft = 2,
    BottomRight = 3,
}

struct Style {
    name: String,
    border: Border,
    margin: [u16; 4],
    padding: [u16; 4],
    current_font: u32,
    background_color: u32,
    font: Font,
    font_size: u32,
    text_color: u32,
    font_color: u32,

    /// Create a new style
    [static] create(name: String) -> *Style?,

    /// Get the default style. Changing this will apply the base style for the whole application
    [static] get_default() -> *Style?,

    /// Get the current style which is based on what has been pushed on the style stack using push/pop
    [static] get_current() -> Style,

    /// Mark the end of style changes
    [static] end_changes(style: *Style),

    /// Select the style to be used, to end using the style use 'fl_pop_style()'
    [static] push(style: *Style),

    /// Pops the current style
    [static] pop(),
}

// vim: syntax=rust expandtab ts=4 sw=4

