
/// Allows the user to select how accurate the glyph placement should be.
/// The list has a the fastest (CPU performance wise) first (Monospace) and the slowest (Accurate) last
/// Rule of thumb is:
/// Auto (Same as basic)
/// Monospaced (code/fixed size fonts) - use Monospace mode
/// Regular Latin text - use Basic mode
/// Hebrew and other complex languages that require accurate layout - Use accurate
enum FontPlacementMode {
    /// Let the library decide the mode (default)
    Auto = 0,
    /// Used for regular Latin based text
    Basic = 0,
    /// Used for fixed-width monospaces fonts (Fastest)
    Mono = 1,
    /// Used for accurate glyph placement (uses the Harfbuzz lib thus is the slowest mode)
    Accurate = 2,
}

#[attributes(Handle)]
struct Font {
    /// Create a font from (TTF) file. To use the font use [Font::set] or [Font::set_with_size] before using text-based widgets
    /// Returns >= 0 for valid handle, use fl_get_status(); for more detailed error message
    [static] new_from_file(filename: String, font_size: u32, placement_mode: FontPlacementMode) -> Font?,
    /// Create a font from memory. Data is expected to point to a TTF file. Fl will take a copy of this data in some cases
    /// Like when needing the accurate placement mode used by Harzbuff that needs to original ttf data
    [static] new_from_memory(name: String, data: [u8], font_size: u32, placement_mode: FontPlacementMode) -> Font?,
    /// Set the font as active when drawing text
    [static] set(font: Font),
    /// Set font active with specific size in pixels
    [static] set_with_size(size: u32),
    /// Destory the current font, render the id invalid
    [static] destroy(font: Font),
}

// vim: syntax=rust expandtab ts=4 sw=4

