
/// Used when specifying rect updates
struct RenderRect {
    x0: i32,
    y0: i32,
    x1: i32,
    y1: i32,
}

/// Vertex layout for textured triangles
struct VertPosUvColor {
    x: f32,
    y: f32,
    u: u16,
    v: u16,
    color: u32,
}

/// Vertex layout for solid triangles
struct VertPosColor {
    x: f32,
    y: f32,
    color: u32,
}

/// Used for rendering triangles with a texture.
#[attributes(RenderCommand)]
struct TexturedTriangles {
    /// Offset into the index buffer 
    offset: u32,
    /// Vertices for the command
    vertex_buffer: [VertPosUvColor],
    /// Index buffer for the command
    index_buffer: [u16],
    /// Texture id used for the command
    texture_id: u32,
}

#[attributes(RenderCommand)]
struct SolidTriangles {
    /// Offset into the index buffer 
    offset: u32,
    /// Vertices for the command
    vertex_buffer: [VertPosColor],
    /// Index buffer for the command
    index_buffer: [u16],
}

/// Texture format specificed when using [CreateTexture] command
enum TextureFormat {
    /// Single byte texture in linear format
    R8Linear = 0,
    /// 3 byte R,G,B format (sRGB)
    Rgb8Srgb = 1,
    /// 3 byte R,G,B format (LINEAR)
    Rgb8Linear = 2,
    /// 4 byte R,G,B,A format (sRGB)
    Rgba8Srgb = 3,
    /// 4 byte R,G,B,A format (LINEAR)
    Rgba8Linear = 4,
    /// 16-bit single format. This will mostly be used for temporary things such as blurs that requires more
    /// than one pass rendering. i16 or f16 will allow better accuracy, but R8_LINEAR can be used in worst case
    /// in case the rendering backend doesn't support this format
    I16OrF16Linear = 5,
}

#[attributes(RenderCommand)]
struct CreateTexture {
    /// Data upload (can be NULL if data is uploaded later)
    data: [u8]?,
    /// This is the id that will later be used when refering to the texture
    id: u16,
    /// See [TextureFormat] for the type
    format: u16,
    /// width of the texture
    width: u16,
    /// height of the texture
    height: u16,
}

/// This is used to update an existing texture with some data. This usually happens when a new image/glyph/etc
/// needs to be displayed but isn't present in a texture yet
#[attributes(RenderCommand)]
struct UpdateTexture {
    /// Data to upload
    data: [u8],
    /// area to update
    rect: RenderRect,
    /// Texture to update
    texture_id: u16,
}

/// Used when restricting an area for rendering. How this is to be implemented depends onthe GPU
/// API, but for OpenGL this corresponts to https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glScissor.xml
#[attributes(RenderCommand)]
struct ScissorRect {
    /// Area restricted for rendering
    rect: RenderRect,
}

// vim: syntax=rust expandtab ts=4 sw=4

