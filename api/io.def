mod image
mod shader

/// Selects to load the data immediately or asynchronously.
enum LoaderType {
    /// Load data asynchonously.
    Async,
    /// Load data immediately.
    Immediate,
}

struct Io {
    /// Load image from file/url. Supported formats are: JPG, PNG, WEBP
    [static] load_image(filename: String) -> Image,
    /// Load image async from file/url. Supported formats are: JPG, PNG, WEBP
    [static] load_image_async(filename: String, loader_type: LoaderType) -> async Image?,
    /// Load image from file/url
    [static] load_file(filename: String, loader_type: LoaderType) -> async Image?,
    /// Same as load_image_from_url, but async and gives back a handle to check/access data later.
    //[static] load_imag_from_url_async(filename: String) -> async bool,
    /// Load a vertex shader be used for rendering. This will also compile the shader. 
    //[static] load_vs_shader_comp(filename: String) -> Shader?,
    /// Load a pixel shader to be used for rendering. This will also compile the shader.
    //[static] load_fragment_shader_comp(filename: String) -> Shader?,
    /// Load a vertex shader and pixel shader to be used as a shader program. This will also compile the shaders.
    [static] load_shader_program_comp(vs_filename: String, ps_filename: String) -> ShaderProgram?,
}

// vim: syntax=rust expandtab ts=4 sw=4

