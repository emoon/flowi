mod image
mod shader

struct Io {
    /// Load image from file/url. Supported formats are:
    /// JPEG baseline & progressive (12 bpc/arithmetic not supported, same as stock IJG lib)
    /// PNG 1/2/4/8/16-bit-per-channel
    /// TGA
    /// BMP non-1bpp, non-RLE
    /// PSD (composited view only, no extra channels, 8/16 bit-per-channel)
    /// GIF
    /// HDR (radiance rgbE format)
    /// PIC (Softimage PIC)
    /// PNM (PPM and PGM binary only)
    //[static] load_image_from_url(filename: String) -> Image?,
    /// Same as load_image_from_url, but async and gives back a handle to check/access data later.
    //[static] load_imag_from_url_async(filename: String) -> async bool,
    /// Load a vertex shader be used for rendering. This will also compile the shader. 
    //[static] load_vs_shader_comp(filename: String) -> Shader?,
    /// Load a pixel shader to be used for rendering. This will also compile the shader.
    //[static] load_fragment_shader_comp(filename: String) -> Shader?,
    /// Load a vertex shader and pixel shader to be used as a shader program. This will also compile the shaders.
    [static] load_shader_program_comp(vs_filename: String, ps_filename: String) -> ShaderProgram?,
}

// vim: syntax=rust expandtab ts=4 sw=4

