mod layout
mod math_data
mod image

#[attributes(flags)]
enum WindowFlags {
    /// Default flags
    None = 0,
    /// Disable title-bar
    NoTitleBar = 1 << 0,
    /// Disable user resizing with the lower-right grip
    NoResize = 1 << 1,
    /// Disable user moving the window
    NoMove = 1 << 2,
    /// Disable scrollbars (window can still scroll with mouse or programmatically)
    NoScrollbar = 1 << 3,
    /// Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.
    NoScrollWithMouse = 1 << 4,
    /// Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).
    NoCollapse = 1 << 5,
    /// Resize every window to its content every frame
    AlwaysAutoResize = 1 << 6,
    /// Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).
    NoBackground = 1 << 7,
    /// Never load/save settings in .ini file
    NoSavedSettings = 1 << 8,
    /// Disable catching mouse, hovering test with pass through.
    NoMouseInputs = 1 << 9,
    /// Has a menu-bar
    MenuBar = 1 << 10,
    /// Allow horizontal scrollbar to appear (off by default).
    HorizontalScrollbar = 1 << 11,
    /// Disable taking focus when transitioning from hidden to visible state
    NoFocusOnAppearing = 1 << 12,
    /// Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)
    NoBringToFrontOnFocus = 1 << 13,
    /// Always show vertical scrollbar (even if content_size.y < size.y)
    AlwaysVerticalScrollbar = 1 << 14,
    /// Always show horizontal scrollbar (even if content_size.x < size.x)
    AlwaysHorizontalScrollbar = 1 << 15,
    /// Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows,
    AlwaysUseWindowPadding = 1 << 16,
    /// No gamepad/keyboard navigation within the window
    NoNavInputs = 1 << 17,
    /// No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)
    NoNavFocus = 1 << 18,
    /// Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X +
    /// closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when
    /// pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
    UnsavedDocument = 1 << 19,
    // No navigation
    //NoNav = NoNavInputs | NoNavFocus,
    // No decoration
    //NoDecoration = NoTitleBar | NoResize | NoScrollbar | NoCollapse, 
    // Skip all inputs
    //NoInputs = NoMouseInputs | NoNavInputs | NoNavFocus,
}

struct Ui {
    /// Start a window 
    [static] window_begin(name: String, flags: WindowFlags) -> bool,
    /// End call for various types such as windows, lists, etc. 
    [static] end(),
    /// Draw static text with the selected font 
    [static] text(text: String),
    /// Draw image. Images can be created with [Image::create_from_file] and [Image::create_from_memory]
    [static] image(image: Image),
    /// Draw image with given size
    [static] image_with_size(image: Image, size: Vec2),
    /// Set position for the next ui-element (this is used when [LayoutMode::Manual] is used)
    [static] set_pos(pos: Vec2),
    /// Get the last widget size. This is usually used for doing manual layouting
    [static] get_last_widget_size(pos: Vec2) -> Rect,
    /// Push button widget that returns true if user has pressed it 
    [static] push_button_with_icon(text: String, image: Image, text_pos: Vec2, image_scale: f32) -> bool, 
    /// Push button widget that returns true if user has pressed it 
    [static] push_button(text: String) -> bool, 
}

// vim: syntax=rust expandtab ts=4 sw=4

