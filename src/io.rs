// This file is auto-generated by api_gen. DO NOT EDIT!

#[allow(unused_imports)]
use crate::manual::{get_last_error, Color, FlString, Result};

#[allow(unused_imports)]
use bitflags::bitflags;

#[allow(unused_imports)]
use crate::image::*;

#[repr(C)]
pub struct IoFfiApi {
    pub(crate) data: *const core::ffi::c_void,
    load_image_from_url:
        unsafe extern "C" fn(data: *const core::ffi::c_void, filename: FlString) -> bool,
}

#[repr(C)]
#[derive(Debug)]
pub struct Io {
    _dummy: u32,
}

#[repr(C)]
pub struct IoApi {
    pub api: *const IoFfiApi,
}

impl IoApi {
    /// Load image from file/url. Supported formats are:
    /// JPEG baseline & progressive (12 bpc/arithmetic not supported, same as stock IJG lib)
    /// PNG 1/2/4/8/16-bit-per-channel
    /// TGA
    /// BMP non-1bpp, non-RLE
    /// PSD (composited view only, no extra channels, 8/16 bit-per-channel)
    /// GIF
    /// HDR (radiance rgbE format)
    /// PIC (Softimage PIC)
    /// PNM (PPM and PGM binary only)
    pub fn load_image_from_url(&self, filename: &str) -> bool {
        unsafe {
            let _api = &*self.api;
            let ret_val = (_api.load_image_from_url)(_api.data, FlString::new(filename));
            ret_val
        }
    }
}
