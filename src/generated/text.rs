// This file is auto-generated by api_gen. DO NOT EDIT!

#[allow(unused_imports)]
use crate::manual::{get_last_error, Color, FlString, Result};

#[allow(unused_imports)]
use bitflags::bitflags;

#[allow(unused_imports)]
use crate::math_data::*;

#[repr(C)]
pub struct TextFfiApi {
    pub(crate) data: *const core::ffi::c_void,
    pub(crate) calc_size:
        unsafe extern "C" fn(data: *const core::ffi::c_void, text: FlString) -> Vec2,
    pub(crate) bullet: unsafe extern "C" fn(data: *const core::ffi::c_void, text: FlString),
    pub(crate) label:
        unsafe extern "C" fn(data: *const core::ffi::c_void, label: FlString, text: FlString),
    pub(crate) show_color:
        unsafe extern "C" fn(data: *const core::ffi::c_void, color: Color, text: FlString),
    pub(crate) show: unsafe extern "C" fn(data: *const core::ffi::c_void, text: FlString),
    pub(crate) text_disabled: unsafe extern "C" fn(data: *const core::ffi::c_void, text: FlString),
}

#[repr(C)]
#[derive(Debug)]
pub struct Text {
    _dummy: u32,
}

#[repr(C)]
pub struct TextApi {
    pub api: *const TextFfiApi,
}

impl TextApi {
    /// Calculate the size of a text string in pixels
    pub fn calc_size(&self, text: &str) -> Vec2 {
        unsafe {
            let _api = &*self.api;
            let ret_val = (_api.calc_size)(_api.data, FlString::new(text));
            ret_val
        }
    }

    /// Bullet text
    pub fn bullet(&self, text: &str) {
        unsafe {
            let _api = &*self.api;
            (_api.bullet)(_api.data, FlString::new(text));
        }
    }

    /// Draw basic text
    pub fn label(&self, label: &str, text: &str) {
        unsafe {
            let _api = &*self.api;
            (_api.label)(_api.data, FlString::new(label), FlString::new(text));
        }
    }

    /// Draw basic text with a color
    pub fn show_color(&self, color: Color, text: &str) {
        unsafe {
            let _api = &*self.api;
            (_api.show_color)(_api.data, color, FlString::new(text));
        }
    }

    /// Show basic text
    pub fn show(&self, text: &str) {
        unsafe {
            let _api = &*self.api;
            (_api.show)(_api.data, FlString::new(text));
        }
    }

    /// Draw text disabled
    pub fn text_disabled(&self, text: &str) {
        unsafe {
            let _api = &*self.api;
            (_api.text_disabled)(_api.data, FlString::new(text));
        }
    }
}
