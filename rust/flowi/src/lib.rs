// This file is auto-generated by api_gen. DO NOT EDIT!

use core::ffi::c_void;
pub mod application;
pub mod context;
pub mod debug;
pub mod error;
pub mod font;
pub mod image;
pub mod layout;
pub mod manual;
pub mod math_data;
pub mod menu;
pub mod render_commands;
pub mod style;
pub mod text;
pub mod ui;
pub mod window;
pub use manual::*;

extern "C" {
    fn fl_application_create_impl(name: FlString, company: FlString) -> *const FlowiFfiApi;
}
pub use crate::font::FontApi;
use crate::font::FontFfiApi;
pub use crate::image::ImageApi;
use crate::image::ImageFfiApi;
pub use crate::layout::CursorApi;
use crate::layout::CursorFfiApi;
pub use crate::menu::MenuApi;
use crate::menu::MenuFfiApi;
pub use crate::style::StyleApi;
use crate::style::StyleFfiApi;
pub use crate::text::TextApi;
use crate::text::TextFfiApi;
pub use crate::ui::UiApi;
use crate::ui::UiFfiApi;
pub use crate::window::WindowApi;
use crate::window::WindowFfiApi;

#[repr(C)]
pub struct FlowiFfiApi {
    data: *const c_void,
    cursor_get_api: unsafe extern "C" fn(data: *const c_void, api_ver: u32) -> *const CursorFfiApi,
    font_get_api: unsafe extern "C" fn(data: *const c_void, api_ver: u32) -> *const FontFfiApi,
    image_get_api: unsafe extern "C" fn(data: *const c_void, api_ver: u32) -> *const ImageFfiApi,
    menu_get_api: unsafe extern "C" fn(data: *const c_void, api_ver: u32) -> *const MenuFfiApi,
    style_get_api: unsafe extern "C" fn(data: *const c_void, api_ver: u32) -> *const StyleFfiApi,
    text_get_api: unsafe extern "C" fn(data: *const c_void, api_ver: u32) -> *const TextFfiApi,
    ui_get_api: unsafe extern "C" fn(data: *const c_void, api_ver: u32) -> *const UiFfiApi,
    window_get_api: unsafe extern "C" fn(data: *const c_void, api_ver: u32) -> *const WindowFfiApi,
}

#[repr(C)]
pub struct Flowi {
    api: *const FlowiFfiApi,
}

impl Flowi {
    pub fn cursor(&self) -> CursorApi {
        let api_priv = unsafe { &*self.api };
        let api = unsafe { (api_priv.cursor_get_api)(api_priv.data, 0) };
        CursorApi { api }
    }

    pub fn font(&self) -> FontApi {
        let api_priv = unsafe { &*self.api };
        let api = unsafe { (api_priv.font_get_api)(api_priv.data, 0) };
        FontApi { api }
    }

    pub fn image(&self) -> ImageApi {
        let api_priv = unsafe { &*self.api };
        let api = unsafe { (api_priv.image_get_api)(api_priv.data, 0) };
        ImageApi { api }
    }

    pub fn menu(&self) -> MenuApi {
        let api_priv = unsafe { &*self.api };
        let api = unsafe { (api_priv.menu_get_api)(api_priv.data, 0) };
        MenuApi { api }
    }

    pub fn style(&self) -> StyleApi {
        let api_priv = unsafe { &*self.api };
        let api = unsafe { (api_priv.style_get_api)(api_priv.data, 0) };
        StyleApi { api }
    }

    pub fn text(&self) -> TextApi {
        let api_priv = unsafe { &*self.api };
        let api = unsafe { (api_priv.text_get_api)(api_priv.data, 0) };
        TextApi { api }
    }

    pub fn ui(&self) -> UiApi {
        let api_priv = unsafe { &*self.api };
        let api = unsafe { (api_priv.ui_get_api)(api_priv.data, 0) };
        UiApi { api }
    }

    pub fn window(&self) -> WindowApi {
        let api_priv = unsafe { &*self.api };
        let api = unsafe { (api_priv.window_get_api)(api_priv.data, 0) };
        WindowApi { api }
    }

    pub fn new(name: &str, company: &str) -> Result<Self> {
        unsafe {
            let api = fl_application_create_impl(FlString::new(name), FlString::new(company));

            if api.is_null() {
                Err(get_last_error())
            } else {
                Ok(Self { api })
            }
        }
    }
}
