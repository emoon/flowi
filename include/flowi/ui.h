
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by api_gen. DO NOT EDIT!
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#include "image.h"
#include "layout.h"
#include "manual.h"
#include "math_data.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef enum FlWindowFlags {
    // Default flags
    FlWindowFlags_None = 0,
    // Disable title-bar
    FlWindowFlags_NoTitleBar = 1 << 0,
    // Disable user resizing with the lower-right grip
    FlWindowFlags_NoResize = 1 << 1,
    // Disable user moving the window
    FlWindowFlags_NoMove = 1 << 2,
    // Disable scrollbars (window can still scroll with mouse or programmatically)
    FlWindowFlags_NoScrollbar = 1 << 3,
    // Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent
    // unless NoScrollbar is also set.
    FlWindowFlags_NoScrollWithMouse = 1 << 4,
    // Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a
    // docking node).
    FlWindowFlags_NoCollapse = 1 << 5,
    // Resize every window to its content every frame
    FlWindowFlags_AlwaysAutoResize = 1 << 6,
    // Disable drawing background color (WindowBg, etc.) and outside border. Similar as using
    // SetNextWindowBgAlpha(0.0f).
    FlWindowFlags_NoBackground = 1 << 7,
    // Never load/save settings in .ini file
    FlWindowFlags_NoSavedSettings = 1 << 8,
    // Disable catching mouse, hovering test with pass through.
    FlWindowFlags_NoMouseInputs = 1 << 9,
    // Has a menu-bar
    FlWindowFlags_MenuBar = 1 << 10,
    // Allow horizontal scrollbar to appear (off by default).
    FlWindowFlags_HorizontalScrollbar = 1 << 11,
    // Disable taking focus when transitioning from hidden to visible state
    FlWindowFlags_NoFocusOnAppearing = 1 << 12,
    // Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)
    FlWindowFlags_NoBringToFrontOnFocus = 1 << 13,
    // Always show vertical scrollbar (even if content_size.y < size.y)
    FlWindowFlags_AlwaysVerticalScrollbar = 1 << 14,
    // Always show horizontal scrollbar (even if content_size.x < size.x)
    FlWindowFlags_AlwaysHorizontalScrollbar = 1 << 15,
    // Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows,
    FlWindowFlags_AlwaysUseWindowPadding = 1 << 16,
    // No gamepad/keyboard navigation within the window
    FlWindowFlags_NoNavInputs = 1 << 17,
    // No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)
    FlWindowFlags_NoNavFocus = 1 << 18,
    // Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X +
    // closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when
    // pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
    FlWindowFlags_UnsavedDocument = 1 << 19,
} FlWindowFlags;

struct FlUiApi;

struct FlUi;

// Start a window
static bool fl_ui_window_begin(struct FlUiApi* api, const char* name, FlWindowFlags flags);

// End call for various types such as windows, lists, etc.
static void fl_ui_end(struct FlUiApi* api);

// Draw static text with the selected font
static void fl_ui_text(struct FlUiApi* api, const char* text);

// Draw image. Images can be created with [Image::create_from_file] and [Image::create_from_memory]
static void fl_ui_image(struct FlUiApi* api, FlImage image);

// Draw image with given size
static void fl_ui_image_with_size(struct FlUiApi* api, FlImage image, FlVec2 size);

// Set position for the next ui-element (this is used when [LayoutMode::Manual] is used)
static void fl_ui_set_pos(struct FlUiApi* api, FlVec2 pos);

// Get the last widget size. This is usually used for doing manual layouting
static FlRect fl_ui_get_last_widget_size(struct FlUiApi* api, FlVec2 pos);

// Push button widget that returns true if user has pressed it
static bool fl_ui_push_button_with_icon(struct FlUiApi* api, const char* text, FlImage image, FlVec2 text_pos,
                                        float image_scale);

// Push button widget that returns true if user has pressed it
static bool fl_ui_push_button(struct FlUiApi* api, const char* text);

#include "ui.inl"

#ifdef __cplusplus
}
#endif
