
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by api_gen. DO NOT EDIT!
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#include "manual.h"
#include "math_data.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef enum FlButtonFlags {
    // Default flags
    FlButtonFlags_None = 0,
    // React on left mouse button (default)
    FlButtonFlags_MouseButtonLeft = 1 << 0,
    // React on right mouse button
    FlButtonFlags_MouseButtonRight = 1 << 1,
    // React on center mouse button
    FlButtonFlags_MouseButtonMiddled = 1 << 2,
} FlButtonFlags;

struct FlButtonApi;

struct FlButton;

// Show a regular push button
static bool fl_button_regular(struct FlButtonApi* api, const char* label);

// Show a regular push button with a specific size
static bool fl_button_regular_size(struct FlButtonApi* api, const char* label, FlVec2 size);

// Show a regular push button without any frame padding.
static bool fl_button_small(struct FlButtonApi* api, const char* label);

// Invisible button that allows custom using drawing, but still acts like a button.
static bool fl_button_invisible(struct FlButtonApi* api, const char* label, FlVec2 size, FlButtonFlags flags);

// Button with a check box state
static bool fl_button_check_box(struct FlButtonApi* api, const char* label, bool* state);

// Radio button
static bool fl_button_radio(struct FlButtonApi* api, const char* label, bool state);

// TODO: Document
static void fl_button_bullet(struct FlButtonApi* api);

#include "button.inl"

#ifdef __cplusplus
}
#endif
